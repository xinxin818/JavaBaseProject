
学习方法：
官网
dubbo文档
github搜索 spring-docs链接，里面有spring官网中文文档翻译。


spring初识：

	简略核心解释：
		spring是一个轻量级的开源框架
		spring为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题
		spring是一个IOC和AOP的容器框架
			IOC：控制反转
			AOP：面向切面变成
			容器：包含并管理应用对的生命周期
	
	使用spring的优点：
		1.spring通过DI、AOP和消除样式代码来简化企业级Java开发
		2.spring框架之外还存在一个构建在核心框架之上的庞大生态圈，它将spring扩展到不同的领域，如web服务，REST，移动开发以及NoSQL
		3.低侵入性设计，代码的污染性极低
		4.独立于各种应用服务器，基于spring框架的应用，可以真正实现write once，run anywhere的承诺
		5.spring的IOC容器降低了业务对象替换的复杂性，提高了组件之间的耦合
		6.spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式处理，从而提供了更好的服用
		7.spring的ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问
		8.spring的高度开放性，并不强制应用完全依赖于spring，开发者可自由选用spring框架的部分或全部
		9.任何一个语言或者任何一个框架想要立于不败之地，那么很重要的就是他的生态。
	
	
	模块解释：
		Test：spring的单元测试模块
		Core Containner：核心容器模块
		AOP+Aspects:面向切面编程模块
		Instrumentation：提供了class instrumentation支持和类加载器的实现来在特定的应用服务器上使用，几乎不用
		Messaging：包括了一系列的用来映射消息到方法的注解，几乎不用
		Data Access/Integration:数据的获取、整合模块，几乎不用
		Web：提供面向web的整合特性
	
	IOC（Inversion of Control）：控制反转
		是一种设计思想，在java开发中，将你设计好的对象交给容器控制，而不是显式的用代码进行对象的创建
		把创建和查找依赖对象的控制权交给IOC容器，有IOC容器进行注入、组合对象之间的关系。
		这样对象与对象之间是松耦合、功能可复用（减少对象的创建和内存消耗）使得程序的整个体系结构可维护性、灵活性、拓展性变高。
		所谓IOC，就简短一句话，对象由spring来创建、管理、装配
		
	为什么使用IOC？
		
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		