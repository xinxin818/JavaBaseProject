
学习方法：
	官网
	dubbo文档
	github搜索 spring-docs链接，里面有spring官网中文文档翻译。
	https://github.com/DocsHome/spring-docs/blob/master/SUMMARY.md


spring初识：

	简略核心解释：
		spring是一个轻量级的开源框架
		spring为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题
		spring是一个IOC和AOP的容器框架
			IOC：控制反转
			AOP：面向切面变成
			容器：包含并管理应用对的生命周期
	
	使用spring的优点：
		1.spring通过DI、AOP和消除样式代码来简化企业级Java开发
		2.spring框架之外还存在一个构建在核心框架之上的庞大生态圈，它将spring扩展到不同的领域，如web服务，REST，移动开发以及NoSQL
		3.低侵入性设计，代码的污染性极低
		4.独立于各种应用服务器，基于spring框架的应用，可以真正实现write once，run anywhere的承诺
		5.spring的IOC容器降低了业务对象替换的复杂性，提高了组件之间的耦合
		6.spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式处理，从而提供了更好的服用
		7.spring的ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问
		8.spring的高度开放性，并不强制应用完全依赖于spring，开发者可自由选用spring框架的部分或全部
		9.任何一个语言或者任何一个框架想要立于不败之地，那么很重要的就是他的生态。
	
	
	模块解释：
		Test：spring的单元测试模块
		Core Containner：核心容器模块
		AOP+Aspects:面向切面编程模块
		Instrumentation：提供了class instrumentation支持和类加载器的实现来在特定的应用服务器上使用，几乎不用
		Messaging：包括了一系列的用来映射消息到方法的注解，几乎不用
		Data Access/Integration:数据的获取、整合模块，几乎不用
		Web：提供面向web的整合特性
	
	IOC（Inversion of Control）：控制反转
		是一种设计思想，在java开发中，将你设计好的对象交给容器控制，而不是显式的用代码进行对象的创建
		把创建和查找依赖对象的控制权交给IOC容器，有IOC容器进行注入、组合对象之间的关系。
		这样对象与对象之间是松耦合、功能可复用（减少对象的创建和内存消耗）使得程序的整个体系结构可维护性、灵活性、拓展性变高。
		所谓IOC，就简短一句话，对象由spring来创建、管理、装配
		
	为什么使用IOC？
	
	面向对象的五大原则：
		
		接口分离原则 ISP（the interface segregation principle ISP）
					模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来
					不要将鼠标（具体实现）直接焊在主板上，使用插口（抽象）连接
		依赖倒置原则 DIP（the dependency inversion principle DIP）	
					具体实现依赖抽象，下层依赖上层。分离
					依赖导致原则使鼠标、键盘和电脑成为独立的互不相干的对象，当电脑（上层）没有鼠标可以正常启动，但是鼠标（下层）没有电脑则一无是处，控制权就被反转了（IOC）。
					所以鼠标需要依赖USP（DI）才能使用。
					之前------正转：主板---焊接--》鼠标	电脑没有鼠标则无法启动
					现在------反转：电脑《--依赖---鼠标	引入DI可以实现ICOC
					IOC是DIP的设计原理，DI是IOC的具体实现
	
	IOC代码实现：
		1.最low的实现方式：导入jar包--配置xml		入门		搭建基于ioc的spring
		2.一般实现方式：maven+注解+xml
		3.最屌实现方式：springboot+javaconfig
	
	DI和IOC：
		很多人把IOC说成一个东西，笼统来说的话是没有问题的，但是本质上还是有所区别的，希望大家能够严谨一点，
		IOC和DI是从不同的角度描述的同一件事，IOC是从容器的角度描述，也可以这样说，
		
		IOC是依赖倒置原则的设计思想，而DI是具体的实现方式。
	
	
	在面向对象设计的软件系统中，底层的实现都是由N个对象组成的，所有的对象通过彼此的合作，最终实现系统的业务逻辑。
	
	有一个对象出了问题，就可能会影响到整个流程的正常运转。现在，伴随着工业级应用的规模越来越庞大，对象之间的依赖关系也越来越复杂，
	经常出现对象之间的多重依赖性关系，因此，机构是和设计师对于系统的分析和设计，将面临更大的挑战，对象之间耦合度过高的系统，必然会出现牵一发而动全身的情形。
	
	由于引进了中间位置的第三方，也就是IOC容器，对象和对象之间没有了耦合关系，它起到了一种类似粘合剂的作用，
	把系统中的所有对象粘合在一起发挥作用，如果没有这个粘合剂，对象与对象之间会彼此失去联系， 这就是有人把IOC容器比喻成粘合剂的由来。
	
	通过对比，我们看出：对象A获得依赖对象B的过程，由主动行为变为了被动行为，控制权颠倒过来了，这就是控制反转这个名称的由来。
	
	IOC优点：
		1.解耦
		2.集中管理
		3.功能可复用（减少对象的创建和内存消耗）
		4.使得程序的整个体系结构可维护性、灵活性、扩展性变高
		
	使用：
		原来是：new 对象()
		现在是：配置文件中配置bean，代码中直接使用。
		
	
	作业：
		1.介绍下对spring的认识
		2.控制反转IOC有什么作用
		3.IOC的优点是什么
		4.搭建spring-Ioc框架
		

		
		
	容器
	
	容器概述：
		AplicationContext是spring Ioc容器实现的代表，它负责实例化，配置和组装bean。容器通过读取配置元数据获取有关实例化、配置和组装哪些兑现的说明。
		配置元数据可以使用xml、java注解或java代码来呈现。它允许你处理应用程序的对象与其他对象之间的互相依赖关系。
		
	配置元数据：
		使用xml的配置
			简单、直观 适合入门
		基于注解的配置
			spring2.5支持基于注解的元数据配置。ssm框架开发中的使用
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		