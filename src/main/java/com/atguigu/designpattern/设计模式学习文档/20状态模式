
状态模式  State Pattern

    基本介绍：
        1）状态模式：它主要用来解决对象再多种状态转换时，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以互相转换
        2）当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类

    角色及职责：
        1）Context类为环境角色，用于维护State实例，这个实例定义当前状态
        2）State是抽象状态角色，定义一个接口封装与Context的一个特点接口相关行为
        3）ConcreteState具体的状态角色，每个子类实现一个与Context的一个状态相关行为

    状态模式再实际项目-借贷平台：
        1）借贷平台的订单，有 审核-发布-抢单 等步骤，随着操作的不同，会改变订单的状态，项目中的这个模块实现就会使用到状态模式
        2）通常通过 if/else 判断订单的状态，从而实现不同的逻辑。
          问题分析：
            这类代码难以应对变化，在添加一种状态时，我们需要手动添加if/else，在添加一种功能时，要对所有的状态进行判断。
            因此代码会变得越来越臃肿，并且一旦没有处理某个状态，便会发生极其严重的bug，难以维护。

    注意事项和细节：
        1）代码有很强的可读性。状态模式将每个状态的行为封装到对应的一个类中
        2）方便维护。将容易产生问题的if-else 语句删除了，如果把每个状态的行为都放到一个类中，每次调用方法时都要判断当前是什么状态，
           不但会产生很多if-else语句，而且容易出错。
        3）符合"开闭原则",容易增删状态。
        4）会产生很多类。每个状态都要一个对应的类，当状态过多时会产生很多类，加大维护难度。
        5）应用场景：当一个事件或者对象有很多种状态，状态之间会相互转换，对不同的状态要求有不同的行为的时候，可以使用考虑状态模式。
