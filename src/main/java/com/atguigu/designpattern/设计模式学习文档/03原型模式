
原型模式

    思路：
        java中的Object类是所有类的根类，Object类提供了一个clone()方法，该方法可以将一个java对象复制一份，
        但是需要实现clone的java类必须要实现一个接口Cloneable，该接口表示该类能够复制且具有复制的能力
        => 原型模式。

    基本介绍：
        1）原型模式是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。
        2）原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节。
        3）工作原理时：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝他们来实施创建，即：对象.clone()
        4）形象的理解：孙大圣拔出猴毛，变出其他孙大圣。

    Spring框架中的源码应用：
        spring框架中原型bean的创建，就是原型模式的应用。
        getBean() -> doGetBean() -> else if(mdb.isPrototype())

    深入讨论 深拷贝和浅拷贝

        浅拷贝的介绍
            1）对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。
            2）对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组/某个类的对象等， 那么浅拷贝会进行引用传递，
              也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。
              在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。
            3）浅拷贝是使用默认的 clone() 方法来是实现。
            4）sheep = (Sheep)super.clone();

        深拷贝的介绍
            1）复制对象的所有基本数据类型的成员变量值
            2）为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。
              也就是说，对象进行深拷贝要对整个对象（包括对象的引用类型）进行拷贝。
            3）深拷贝实现方式1： 重写 clone 方法来实现深拷贝。
            4）深拷贝实现方式2： 通过 对象序列化 实现深拷贝（推荐）。

    原型模式的注意事项和细节
        1）创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率。
        2）不用重新初始化对象，而是动态的获得对象运行时的状态
        3）如果原始对下给你发生变化（增加或者减少属性），其他克隆对象的也会发生相应的变化，无需修改代码
        4）在实现深克隆的时候可能需要比较复杂的代码
        5）缺点：需要为每一个类装配一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了ocp原则。