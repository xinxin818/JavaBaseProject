设计模式的七大原则：

    要求：
        1.七大设计原则核心思想
        2.能够以类图的说明设计原则
        3.在项目实际开发中，你在哪里使用到了ocp原则

    七大原则：
        1.单一职责原则    （对类来说，一个类应该只负责一项职责）
        2.接口隔离原则    （客户端不应该依赖他不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上）
        3.依赖倒转原则    （面向接口编程，接口或抽象类制定好规范，把展示细节的任务交给他们的实现类去完成）
        4.里氏替换原则    （子类尽量不要重写父类的方法。继承让两个类耦合性增强了，适当的情况下可以通过聚合，组合，依赖来解决问题）
     *  5.开闭原则ocp    （对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节。）
        6.迪米特原则     （最少知道原则，一个类对自己以来的类知道的越少越好。只与直接的朋友通信。成员变量，方法参数，方法返回值是直接的朋友，出现在局部变量中的类不是直接的朋友。）
        7.合成复用原则    （尽量使用合成/聚合的方式，而不是使用继承。针对接口编程，松耦合）

    设计模式在软件中哪里？
        面向对象（oo）=>功能模块[设计模式+算法(数据结构)]=>框架[使用到多种设计模式]=>架构[服务器集群]

    设计模式学习：
        应用场景->设计模式->剖析原理->分析实现步骤(图解)->代码实现->框架或项目源码分析(找到使用的地方)的步骤讲解

    设计模式的目的：
        为了让程序，具有更好的
            1.代码重用性 (相同功能的代码，不用多次编写)
            2.可读性    (编程规范性，便于其他程序员的阅读和理解)
            3.可拓展性   (当需要增加新的功能时，非常的方便)
            4.可靠性    (当增加新的功能后，对原来的功能没有影响)
            5.高内聚，低耦合


