单例模式  simpleFactory

    采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（静态方法）。
    比如Hibernate的SessionFactory，它充当数据存储源的代理，并负责创建Session对象。SessionFactory并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFactory就够，这时就会使用到单例模式。

    单例模式八种方式
        1.饿汉式 (静态常量)
        2.饿汉式 (静态代码块)
        3.懒汉式 (线程不安全)
        4.懒汉式 (线程安全，同步方法)
        5.懒汉式 (线程安全，同步代码块)
        6.双重检查
        7.静态内部类
        8.枚举

    1.饿汉式 (静态常量)
        1）构造器私有化（防止new）
        2）类的内部创建对象
        3）向外暴露一个静态的公共方法。getInstance

        优缺点说明：
            1）优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。
            2）缺点：在类装载的时候就完成实例化，没有达到 Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。
            3）这种方式基于 classloder 机制避免了多线程的同步问题，不过instance在类装载时就实例化，在单例模式中大多数都是调用 getInstance方法，
               但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到 lazy loading的效果。
            4）结论：这种单例模式可用，可能造成内存浪费。

    2.饿汉式 (静态代码块)
        优缺点说明：
            1）这种方式和上面的方法其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。
              优缺点和上面是一样的。

    3.懒汉式 (线程不安全)
        优缺点说明：
            1)起到了Lazy Loading的效果，但是只能在单线程下使用。
            2）如果在多线程下，一个线程进入了 if(singleton==null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，
              这时便会产生多个实例。所以在多线程环境下不可使用这种方式。
            3）结论:在实际开发中，不要使用这种方式。

    4.懒汉式 (线程安全，同步方法)
        优缺点说明：
            1)解决了线程安全的问题
            2）效率太低了，每个线程在想获得类的实例的时候，执行 getInstance() 方法都要进行同步。而其实这个方法只执行一个实例化代码就够了，
              后面的想获得该类实例，直接return就行了。方法进行同步效率太低。
            3）结论:在实际开发中，不推荐使用这种方式。

    5.懒汉式 (线程安全，同步代码块)
           不推荐使用

    6.双重检查
         优缺点说明：
            1)Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两次 if (instance == null) 检查，这样就可以保证线程安全了。
            2）这样，实例化代码只用执行一次，后面再次访问时，判断if (instance == null)，直接return实例化对象，也避免反复进行方法同步。
            3）线程安全：延迟加载，效率较高。
            4）结论:在实际开发中，推荐使用这种单例设计模式。

    7.静态内部类
        优缺点说明：
            1)这种方式采用了类加载的机制来保证初始化实例时只有一个线程。
            2）静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。
            3）类的静态属性只会在第一次加载类的是初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。
            4）优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高
            5）结论：推荐使用。

    8.枚举
        优缺点说明：
        1)借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。
        2）这种方式是 Effecitive JAVA 作者 提倡的方式。
        3）结论：推荐使用。


    单例模式在JDK应用的源码分析
        JDK中，java.lang.Runtime就是经典的单例模式 （饿汉式）

    单例模式注意事项和细节说明
        1）单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁拆功能键销毁的对象，使用单例模式可以提高系统性能。
        2）当想实例化一个单例类的时候，必须要记住使用相应的获得对象的方法，而不是使用new。
        3）单例模式使用的场景：
            需要频繁的进行创建和销毁的对象/创建对象时耗时过多或耗费资源过多(即:重量级对象)，
            但又经常用到的对象/工具类对象/频繁访问数据库或文件的对象(比如数据源/session工厂)